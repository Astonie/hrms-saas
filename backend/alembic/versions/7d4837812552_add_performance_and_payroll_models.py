"""Add performance and payroll models

Revision ID: 7d4837812552
Revises: 
Create Date: 2025-08-17 12:58:34.334299

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '7d4837812552'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('salary_structures',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('effective_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('base_salary_component', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('allowance_components', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('deduction_components', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('calculation_rules', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('tax_rules', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('overtime_rules', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('department_ids', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('job_grades', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('employee_types', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('custom_fields', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    comment='SalaryStructure table for multi-tenant HRMS'
    )
    op.create_index(op.f('ix_salary_structures_id'), 'salary_structures', ['id'], unique=False)
    op.create_table('performance_metrics',
    sa.Column('employee_id', sa.String(length=36), nullable=False),
    sa.Column('metric_name', sa.String(length=100), nullable=False),
    sa.Column('metric_category', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('measurement_unit', sa.String(length=50), nullable=False),
    sa.Column('measurement_period', sa.String(length=20), nullable=False),
    sa.Column('target_value', sa.Float(), nullable=True),
    sa.Column('current_value', sa.Float(), nullable=True),
    sa.Column('baseline_value', sa.Float(), nullable=True),
    sa.Column('measurement_date', sa.Date(), nullable=False),
    sa.Column('period_start', sa.Date(), nullable=True),
    sa.Column('period_end', sa.Date(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('weight', sa.Float(), nullable=False),
    sa.Column('custom_fields', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='PerformanceMetric table for multi-tenant HRMS'
    )
    op.create_index(op.f('ix_performance_metrics_employee_id'), 'performance_metrics', ['employee_id'], unique=False)
    op.create_index(op.f('ix_performance_metrics_id'), 'performance_metrics', ['id'], unique=False)
    op.create_table('performance_reviews',
    sa.Column('employee_id', sa.String(length=36), nullable=False),
    sa.Column('reviewer_id', sa.String(length=36), nullable=False),
    sa.Column('review_period_start', sa.Date(), nullable=False),
    sa.Column('review_period_end', sa.Date(), nullable=False),
    sa.Column('status', sa.Enum('DRAFT', 'IN_PROGRESS', 'COMPLETED', 'OVERDUE', name='reviewstatus'), nullable=False),
    sa.Column('review_type', sa.Enum('ANNUAL', 'SEMI_ANNUAL', 'QUARTERLY', 'PROBATION', 'PROJECT_BASED', 'EXIT', name='reviewtype'), nullable=False),
    sa.Column('overall_rating', sa.Float(), nullable=True),
    sa.Column('review_date', sa.Date(), nullable=True),
    sa.Column('due_date', sa.Date(), nullable=True),
    sa.Column('submitted_date', sa.Date(), nullable=True),
    sa.Column('approved_date', sa.Date(), nullable=True),
    sa.Column('strengths', sa.Text(), nullable=True),
    sa.Column('improvements', sa.Text(), nullable=True),
    sa.Column('achievements', sa.Text(), nullable=True),
    sa.Column('development_areas', sa.Text(), nullable=True),
    sa.Column('feedback', sa.Text(), nullable=True),
    sa.Column('employee_comments', sa.Text(), nullable=True),
    sa.Column('manager_comments', sa.Text(), nullable=True),
    sa.Column('hr_comments', sa.Text(), nullable=True),
    sa.Column('categories', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('competencies', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('kpis', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('next_period_goals', sa.Text(), nullable=True),
    sa.Column('career_development_plan', sa.Text(), nullable=True),
    sa.Column('training_recommendations', sa.Text(), nullable=True),
    sa.Column('is_self_review', sa.Boolean(), nullable=False),
    sa.Column('is_360_review', sa.Boolean(), nullable=False),
    sa.Column('custom_fields', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ),
    sa.ForeignKeyConstraint(['reviewer_id'], ['employees.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='PerformanceReview table for multi-tenant HRMS'
    )
    op.create_index(op.f('ix_performance_reviews_employee_id'), 'performance_reviews', ['employee_id'], unique=False)
    op.create_index(op.f('ix_performance_reviews_id'), 'performance_reviews', ['id'], unique=False)
    op.create_index(op.f('ix_performance_reviews_review_period_end'), 'performance_reviews', ['review_period_end'], unique=False)
    op.create_index(op.f('ix_performance_reviews_review_period_start'), 'performance_reviews', ['review_period_start'], unique=False)
    op.create_index(op.f('ix_performance_reviews_reviewer_id'), 'performance_reviews', ['reviewer_id'], unique=False)
    op.create_table('performance_feedback',
    sa.Column('employee_id', sa.String(length=36), nullable=False),
    sa.Column('feedback_giver_id', sa.String(length=36), nullable=False),
    sa.Column('review_id', sa.String(length=36), nullable=True),
    sa.Column('feedback_type', sa.String(length=50), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=True),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('project_context', sa.String(length=200), nullable=True),
    sa.Column('situation_context', sa.Text(), nullable=True),
    sa.Column('is_anonymous', sa.Boolean(), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('visibility_level', sa.String(length=20), nullable=False),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('custom_fields', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ),
    sa.ForeignKeyConstraint(['feedback_giver_id'], ['employees.id'], ),
    sa.ForeignKeyConstraint(['review_id'], ['performance_reviews.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='PerformanceFeedback table for multi-tenant HRMS'
    )
    op.create_index(op.f('ix_performance_feedback_employee_id'), 'performance_feedback', ['employee_id'], unique=False)
    op.create_index(op.f('ix_performance_feedback_feedback_giver_id'), 'performance_feedback', ['feedback_giver_id'], unique=False)
    op.create_index(op.f('ix_performance_feedback_id'), 'performance_feedback', ['id'], unique=False)
    op.create_index(op.f('ix_performance_feedback_review_id'), 'performance_feedback', ['review_id'], unique=False)
    op.create_table('performance_goals',
    sa.Column('employee_id', sa.String(length=36), nullable=False),
    sa.Column('review_id', sa.String(length=36), nullable=True),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('DRAFT', 'ACTIVE', 'ACHIEVED', 'PARTIALLY_ACHIEVED', 'NOT_ACHIEVED', 'CANCELLED', name='goalstatus'), nullable=False),
    sa.Column('priority', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='goalpriority'), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=True),
    sa.Column('target_date', sa.Date(), nullable=True),
    sa.Column('completion_date', sa.Date(), nullable=True),
    sa.Column('progress_percentage', sa.Float(), nullable=False),
    sa.Column('measurement_criteria', sa.Text(), nullable=True),
    sa.Column('success_metrics', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('achievement_rating', sa.Float(), nullable=True),
    sa.Column('manager_feedback', sa.Text(), nullable=True),
    sa.Column('employee_notes', sa.Text(), nullable=True),
    sa.Column('category', sa.String(length=100), nullable=True),
    sa.Column('is_stretch_goal', sa.Boolean(), nullable=False),
    sa.Column('is_team_goal', sa.Boolean(), nullable=False),
    sa.Column('weight', sa.Float(), nullable=False),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ),
    sa.ForeignKeyConstraint(['review_id'], ['performance_reviews.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='PerformanceGoal table for multi-tenant HRMS'
    )
    op.create_index(op.f('ix_performance_goals_employee_id'), 'performance_goals', ['employee_id'], unique=False)
    op.create_index(op.f('ix_performance_goals_id'), 'performance_goals', ['id'], unique=False)
    op.create_index(op.f('ix_performance_goals_review_id'), 'performance_goals', ['review_id'], unique=False)
    op.create_table('payroll_runs',
    sa.Column('run_name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('pay_period_start', sa.Date(), nullable=False),
    sa.Column('pay_period_end', sa.Date(), nullable=False),
    sa.Column('pay_date', sa.Date(), nullable=False),
    sa.Column('status', sa.Enum('DRAFT', 'CALCULATED', 'APPROVED', 'PAID', 'CANCELLED', name='payrollstatus'), nullable=False),
    sa.Column('frequency', sa.Enum('WEEKLY', 'BI_WEEKLY', 'SEMI_MONTHLY', 'MONTHLY', 'QUARTERLY', 'ANNUALLY', name='payrollfrequency'), nullable=False),
    sa.Column('created_by', sa.String(length=36), nullable=False),
    sa.Column('processed_by', sa.String(length=36), nullable=True),
    sa.Column('processed_date', sa.DateTime(), nullable=True),
    sa.Column('approved_by', sa.String(length=36), nullable=True),
    sa.Column('approved_date', sa.DateTime(), nullable=True),
    sa.Column('total_employees', sa.Integer(), nullable=False),
    sa.Column('total_gross_pay', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('total_deductions', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('total_net_pay', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('total_taxes', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('department_ids', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('employee_ids', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('include_terminated', sa.Boolean(), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('processing_notes', sa.Text(), nullable=True),
    sa.Column('custom_fields', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['approved_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['processed_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='PayrollRun table for multi-tenant HRMS'
    )
    op.create_index(op.f('ix_payroll_runs_id'), 'payroll_runs', ['id'], unique=False)
    op.create_index(op.f('ix_payroll_runs_pay_period_end'), 'payroll_runs', ['pay_period_end'], unique=False)
    op.create_index(op.f('ix_payroll_runs_pay_period_start'), 'payroll_runs', ['pay_period_start'], unique=False)
    op.create_table('payroll_entries',
    sa.Column('employee_id', sa.String(length=36), nullable=False),
    sa.Column('payroll_run_id', sa.String(length=36), nullable=True),
    sa.Column('pay_period_start', sa.Date(), nullable=False),
    sa.Column('pay_period_end', sa.Date(), nullable=False),
    sa.Column('pay_date', sa.Date(), nullable=True),
    sa.Column('status', sa.Enum('DRAFT', 'CALCULATED', 'APPROVED', 'PAID', 'CANCELLED', name='payrollstatus'), nullable=False),
    sa.Column('processed_by', sa.String(length=36), nullable=True),
    sa.Column('processed_date', sa.Date(), nullable=True),
    sa.Column('approved_by', sa.String(length=36), nullable=True),
    sa.Column('approved_date', sa.Date(), nullable=True),
    sa.Column('basic_salary', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('hourly_rate', sa.Numeric(precision=8, scale=2), nullable=True),
    sa.Column('hours_worked', sa.Float(), nullable=True),
    sa.Column('overtime_hours', sa.Float(), nullable=False),
    sa.Column('overtime_rate_multiplier', sa.Float(), nullable=False),
    sa.Column('overtime_amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('housing_allowance', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('transport_allowance', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('meal_allowance', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('medical_allowance', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('communication_allowance', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('other_allowances', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('total_allowances', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('performance_bonus', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('sales_commission', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('attendance_bonus', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('holiday_bonus', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('other_bonuses', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('total_bonuses', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('income_tax', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('social_security', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('pension_contribution', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('health_insurance', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('life_insurance', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('loan_deduction', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('advance_deduction', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('other_deductions', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('total_deductions', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('gross_pay', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('taxable_income', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('net_pay', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('payment_method', sa.Enum('BANK_TRANSFER', 'CHECK', 'CASH', 'MOBILE_MONEY', 'CRYPTO', name='paymentmethod'), nullable=False),
    sa.Column('bank_account_id', sa.String(length=36), nullable=True),
    sa.Column('payment_reference', sa.String(length=100), nullable=True),
    sa.Column('payment_notes', sa.Text(), nullable=True),
    sa.Column('tax_status', sa.Enum('SINGLE', 'MARRIED_JOINTLY', 'MARRIED_SEPARATELY', 'HEAD_OF_HOUSEHOLD', name='taxstatus'), nullable=True),
    sa.Column('tax_exemptions', sa.Integer(), nullable=False),
    sa.Column('ytd_gross_pay', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('ytd_tax_paid', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('ytd_net_pay', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('exchange_rate', sa.Float(), nullable=False),
    sa.Column('calculation_notes', sa.Text(), nullable=True),
    sa.Column('custom_fields', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['approved_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ),
    sa.ForeignKeyConstraint(['payroll_run_id'], ['payroll_runs.id'], ),
    sa.ForeignKeyConstraint(['processed_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='PayrollEntry table for multi-tenant HRMS'
    )
    op.create_index(op.f('ix_payroll_entries_employee_id'), 'payroll_entries', ['employee_id'], unique=False)
    op.create_index(op.f('ix_payroll_entries_id'), 'payroll_entries', ['id'], unique=False)
    op.create_index(op.f('ix_payroll_entries_pay_period_end'), 'payroll_entries', ['pay_period_end'], unique=False)
    op.create_index(op.f('ix_payroll_entries_pay_period_start'), 'payroll_entries', ['pay_period_start'], unique=False)
    op.create_index(op.f('ix_payroll_entries_payroll_run_id'), 'payroll_entries', ['payroll_run_id'], unique=False)
    op.create_table('payroll_audit_logs',
    sa.Column('payroll_entry_id', sa.String(length=36), nullable=False),
    sa.Column('payroll_run_id', sa.String(length=36), nullable=True),
    sa.Column('action', sa.String(length=50), nullable=False),
    sa.Column('changed_by', sa.String(length=36), nullable=False),
    sa.Column('change_date', sa.DateTime(), nullable=False),
    sa.Column('field_name', sa.String(length=100), nullable=True),
    sa.Column('old_value', sa.Text(), nullable=True),
    sa.Column('new_value', sa.Text(), nullable=True),
    sa.Column('change_reason', sa.Text(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('additional_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['changed_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['payroll_entry_id'], ['payroll_entries.id'], ),
    sa.ForeignKeyConstraint(['payroll_run_id'], ['payroll_runs.id'], ),
    sa.PrimaryKeyConstraint('id'),
    comment='PayrollAuditLog table for multi-tenant HRMS'
    )
    op.create_index(op.f('ix_payroll_audit_logs_id'), 'payroll_audit_logs', ['id'], unique=False)
    op.create_index(op.f('ix_payroll_audit_logs_payroll_entry_id'), 'payroll_audit_logs', ['payroll_entry_id'], unique=False)
    op.create_index(op.f('ix_payroll_audit_logs_payroll_run_id'), 'payroll_audit_logs', ['payroll_run_id'], unique=False)
    op.drop_table('users', schema='demo')
    op.drop_constraint(op.f('plan_features_plan_id_fkey'), 'plan_features', type_='foreignkey')
    op.create_foreign_key(None, 'plan_features', 'subscription_plans', ['plan_id'], ['id'], source_schema='public', referent_schema='public')
    op.drop_constraint(op.f('tenant_billing_invoices_tenant_id_fkey'), 'tenant_billing_invoices', type_='foreignkey')
    op.create_foreign_key(None, 'tenant_billing_invoices', 'tenants', ['tenant_id'], ['id'], source_schema='public', referent_schema='public')
    op.drop_constraint(op.f('tenant_subscription_history_tenant_id_fkey'), 'tenant_subscription_history', type_='foreignkey')
    op.create_foreign_key(None, 'tenant_subscription_history', 'tenants', ['tenant_id'], ['id'], source_schema='public', referent_schema='public')
    op.drop_constraint(op.f('tenant_usage_logs_tenant_id_fkey'), 'tenant_usage_logs', type_='foreignkey')
    op.create_foreign_key(None, 'tenant_usage_logs', 'tenants', ['tenant_id'], ['id'], source_schema='public', referent_schema='public')
    op.drop_constraint(op.f('tenants_subscription_plan_id_fkey'), 'tenants', type_='foreignkey')
    op.create_foreign_key(None, 'tenants', 'subscription_plans', ['subscription_plan_id'], ['id'], source_schema='public', referent_schema='public')
    op.drop_constraint(op.f('users_tenant_id_fkey'), 'users', type_='foreignkey')
    op.create_foreign_key(None, 'users', 'tenants', ['tenant_id'], ['id'], referent_schema='public')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.create_foreign_key(op.f('users_tenant_id_fkey'), 'users', 'tenants', ['tenant_id'], ['id'])
    op.drop_constraint(None, 'tenants', schema='public', type_='foreignkey')
    op.create_foreign_key(op.f('tenants_subscription_plan_id_fkey'), 'tenants', 'subscription_plans', ['subscription_plan_id'], ['id'])
    op.drop_constraint(None, 'tenant_usage_logs', schema='public', type_='foreignkey')
    op.create_foreign_key(op.f('tenant_usage_logs_tenant_id_fkey'), 'tenant_usage_logs', 'tenants', ['tenant_id'], ['id'])
    op.drop_constraint(None, 'tenant_subscription_history', schema='public', type_='foreignkey')
    op.create_foreign_key(op.f('tenant_subscription_history_tenant_id_fkey'), 'tenant_subscription_history', 'tenants', ['tenant_id'], ['id'])
    op.drop_constraint(None, 'tenant_billing_invoices', schema='public', type_='foreignkey')
    op.create_foreign_key(op.f('tenant_billing_invoices_tenant_id_fkey'), 'tenant_billing_invoices', 'tenants', ['tenant_id'], ['id'])
    op.drop_constraint(None, 'plan_features', schema='public', type_='foreignkey')
    op.create_foreign_key(op.f('plan_features_plan_id_fkey'), 'plan_features', 'subscription_plans', ['plan_id'], ['id'])
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('user_type', sa.VARCHAR(length=20), server_default=sa.text("'admin'::character varying"), autoincrement=False, nullable=True),
    sa.Column('tenant_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f('users_tenant_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('users_pkey')),
    sa.UniqueConstraint('email', name=op.f('users_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('username', name=op.f('users_username_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    schema='demo'
    )
    op.drop_index(op.f('ix_payroll_audit_logs_payroll_run_id'), table_name='payroll_audit_logs')
    op.drop_index(op.f('ix_payroll_audit_logs_payroll_entry_id'), table_name='payroll_audit_logs')
    op.drop_index(op.f('ix_payroll_audit_logs_id'), table_name='payroll_audit_logs')
    op.drop_table('payroll_audit_logs')
    op.drop_index(op.f('ix_payroll_entries_payroll_run_id'), table_name='payroll_entries')
    op.drop_index(op.f('ix_payroll_entries_pay_period_start'), table_name='payroll_entries')
    op.drop_index(op.f('ix_payroll_entries_pay_period_end'), table_name='payroll_entries')
    op.drop_index(op.f('ix_payroll_entries_id'), table_name='payroll_entries')
    op.drop_index(op.f('ix_payroll_entries_employee_id'), table_name='payroll_entries')
    op.drop_table('payroll_entries')
    op.drop_index(op.f('ix_payroll_runs_pay_period_start'), table_name='payroll_runs')
    op.drop_index(op.f('ix_payroll_runs_pay_period_end'), table_name='payroll_runs')
    op.drop_index(op.f('ix_payroll_runs_id'), table_name='payroll_runs')
    op.drop_table('payroll_runs')
    op.drop_index(op.f('ix_performance_goals_review_id'), table_name='performance_goals')
    op.drop_index(op.f('ix_performance_goals_id'), table_name='performance_goals')
    op.drop_index(op.f('ix_performance_goals_employee_id'), table_name='performance_goals')
    op.drop_table('performance_goals')
    op.drop_index(op.f('ix_performance_feedback_review_id'), table_name='performance_feedback')
    op.drop_index(op.f('ix_performance_feedback_id'), table_name='performance_feedback')
    op.drop_index(op.f('ix_performance_feedback_feedback_giver_id'), table_name='performance_feedback')
    op.drop_index(op.f('ix_performance_feedback_employee_id'), table_name='performance_feedback')
    op.drop_table('performance_feedback')
    op.drop_index(op.f('ix_performance_reviews_reviewer_id'), table_name='performance_reviews')
    op.drop_index(op.f('ix_performance_reviews_review_period_start'), table_name='performance_reviews')
    op.drop_index(op.f('ix_performance_reviews_review_period_end'), table_name='performance_reviews')
    op.drop_index(op.f('ix_performance_reviews_id'), table_name='performance_reviews')
    op.drop_index(op.f('ix_performance_reviews_employee_id'), table_name='performance_reviews')
    op.drop_table('performance_reviews')
    op.drop_index(op.f('ix_performance_metrics_id'), table_name='performance_metrics')
    op.drop_index(op.f('ix_performance_metrics_employee_id'), table_name='performance_metrics')
    op.drop_table('performance_metrics')
    op.drop_index(op.f('ix_salary_structures_id'), table_name='salary_structures')
    op.drop_table('salary_structures')
    # ### end Alembic commands ###
